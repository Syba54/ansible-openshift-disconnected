---
- name: Install docker dependencies
  yum:
    name:
    - docker
#   - docker-python
    state: installed

- name: add our 'shared' docker-registry to 'bastion'
  lineinfile:
    name: /etc/sysconfig/docker
    regexp: "^INSECURE_REGISTRY.*{{ groups['shared'][0] }}"
    line: "INSECURE_REGISTRY='--insecure-registry {{ groups['shared'][0] }}:5000'"
  register: insecure

- name: start docker
  service: 
    name: docker
    state: "{{ 'restarted' if insecure.changed else 'started' }}" 
    enabled: true

- name: Get OAuth login token for docker-registry
  uri:
    url: "https://{{ groups['shared'][0] }}:8443/oauth/authorize?response_type=token&client_id=openshift-challenging-client"
    user: admin
    password: anything
    validate_certs: no
#    follow_redirects: no
    return_content: yes
    force_basic_auth: yes
  register: authorize
  ignore_errors: yes

#- name: Get OAuth login token for docker-registry
#  raw: "curl -sk 'https://{{ groups['shared'][0] }}:8443/oauth/authorize?response_type=token&client_id=openshift-challenging-client' --user admin:.  -I  | grep -oP 'access_token=[^&]*'"
#  register: authorize

- debug: var=authorize
- set_fact:
    oauth_token: "{{ authorize.url | regex_replace('.*access_token=([^&]*).*', '\\1') }}"
  when: authorized is defined and authorized.url is defined
- debug: var=oauth_token

- name: Log into our 'shared' docker-registry
  docker_login:
    registry: "{{ groups['shared'][0] }}:5000"
    username: admin
    password: "{{ oauth_token }}"
  when: oauth_token is defined

- name: Check existing saved images
  stat:
    path: "{{ docker_repos_dir }}/{{ item }}.tar"
  register: tarbal[item]
  with_items:
  - base_images
  - component_images
  - s2i_images

- name: load images from tarbal
  docker_image:
    name: "{{ item.name }}"
    tag: "{{ item.tag }}"
    repository: "{{ item | regex_replace('^[^/]*', groups['shared'][0] + ':5000') }}"
    push: yes
  when: tarbal[item].stat.exists
  with_items:
  - "{{ base_images }}"
  - "{{ component_images }}"
  - "{{ s2i_images }}"

- name: pull images
  docker_image:
    name: "{{ item }}"
#   repository: "{{ item | regex_replace('^[^/]*', groups['shared'][0] + ':5000') }}"
#   push: yes
# when: not tarbal[item].stat.exists
  with_items:
  - "{{ registry_images }}"
  - "{{ base_images }}"
  - "{{ component_images }}"
  - "{{ s2i_images }}"

- name: create images export directory
  file:
    path: "{{ docker_repos_dir }}"
    state: directory
    mode: 0777

- name: save docker images
  command: "docker save -o {{ docker_repos_dir }}/{{ item }}.tar {{ vars[item] | join(' ') }}"
  args:
    creates: "{{ docker_repos_dir }}/{{ item }}.tar"
  with_items:
  - base_images
  - component_images
  - s2i_images

- name: allow everyone access to the images
  file: 
    path: "{{ docker_repos_dir }}/{{ item }}.tar"
    mode: 0644
  with_items:
  - base_images
  - component_images
  - s2i_images

